	Restful	web service 

Spring.io
	dependencies:web devops jpa h2
	import and lounch the project

Rest: REpresentational State Transfer
	REST is a style how design your resources and how expose using http
	Rest makes best use of HTTP methods( GET PUT POST), Status codes (200 404)
	Resourse: key absraction each can have an URI (Uniform resources representation) and different representation
	Example: Creae a user need POST /user
	Need to create the restful services: Consider a social medea application :USER -> POST
		retrive all users : get /userss
		create a User :post /users
		retrive one user : get /users/{id}-> /users/1
		delete user : DELETE /user/{id}->/users/1
		retrieve all post of user : GET /users/{id}/posts
		create a post for a uset : post /users/{id}/posts/
		retrive details of post : GET /users/{id}/posts/{post_id}
	
	@RestControllers	
	@GetMapping	@PostMapping @RequestMapping
	
Answer the questons
	Debug mode 
	logging.level.org.springframework=debug
	DispatcherServletAutoConfiguration
	ErrorMvcAutoConfiguration
	HttpMessageConvertersAutoConfiguration
	JacksonAutoConfiguration
	
	DispatcherServlet take the request fined the mapping and use the respose (middle)
	DispatcherServlet important for security too
	DispatcherServlet is the Front controller for spring framework
	
	@ResponseBody : annotation for the format of the response
	
Path parameter: users/{id}	
	@PathVariable
	String.format("Strong %s", onther variable);

User Bean and Service Bean
	For the moment using static data (array List)
	@Component
		
User Resource
	@Autowired the @Component
	http://localhost:8080/users/	
	(user # data structure UesrDao #database UserResource #rest
	@GetMapping @GetVariable

60
	Make a post we need a rest or a command line command
	Talented api for send post request like rest 		
62		
	 ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedUser.getId()).toUri();
	 ResponseEntity
63
	 Exception handling
		@ResponseStatus(HttpStatus.NOT_FOUND)
64	Implementing generic exception handling
	Timestamp message detail
	ResponseEntityExceptionHandler importent class for exception handler
	applay this to all controller
66 Delete method
68	Implementing Validation
		hibernate-validator
		validator api
70	HATEOAS for RESTful Service		#Hypermedia as the Engine of Application State
	EntityModel<User> resource = EntityModel.of(user);
		WebMvcLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retriveAllUsers(service));
		resource.add(linkTo.withRel("all-users"));
71 Advance RESTful service
72 Internatiolazitation
		configuration
		localeresolver
		default
		resoursebundlemessageSource
		
		Autowire MessageSource
		@RequestHeader
		messageSource
73 	Internatiolazitation semplification
74	Content Negotiation
		Choise the resource that we want but on reality need to negotiate 
		Accept hearder important for negotiate the format
		jackson jars makes the databinding from json to xml or onther typs
76	Configure autogeneration of  swagger documantation
		Swagger popular for documentation on REST
		Swagger2 swagger-io
		NEW URL for SWAGGER UI - http://localhost:8080/swagger-ui/ or http://localhost:8080/swagger-ui/index.html
78	Swagger introduction
		Info Path Definition (important things to swagger)
		make the clients now about out structure have two ways
			1) swagger json 2) swagger -ui
79 	Swagger documentation
		Give more info to the consumer improve the documentation
80	Monitoring API's with Spring Boot Actuator
	spring-boot-actuator #For monitoring
	halt browser #Is a broser consist on links for the api are on the rest application
	http://localhost:8080/
		actuator on http://localhost:8080/actuator #se the health of application
81	IO Filtering
	For filter the data than need we use filtering
	@JsonIgnore
	@JsonIgnoreProperties(value= {"field1" ,"field2"})
	This is static filtering
82	Dinamic Filtering
		MappingJacksonValue
		FilterProvider
83	Verioning
84 	Advance versioning
		mapping
		param
		header
		produces
85	Authentication
		Username: user 
		pass: find on console
		
		

	
	
	
	
	
	
	
	
	
	
		

